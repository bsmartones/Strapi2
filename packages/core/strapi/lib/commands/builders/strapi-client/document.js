'use strict';

// const { createElement } = require('react');
// const { renderToStaticMarkup } = require('react-dom/server');

// const DEFAULT_PROPS = {
//   entryPath: './.strapi/client/app.js',
// };

/**
 * Assuming someone has one, we could extend this to allow
 * users to have their own custom document component.
 */

// const getDefaultDocumentComponent = () => {
//   const { DefaultDocument } = require('@strapi/admin/admin');

//   return DefaultDocument;
// };

/**
 * @typedef DocumentProps
 * @property {string} entryPath
 * @property {boolean} isVite
 */

/**
 * @type {(args: { props: DocumentProps }) => string
 */
const getDocumentHTML = ({ props }) => {
  // const Document = getDefaultDocumentComponent();

  // const result = renderToStaticMarkup(createElement(Document, { ...DEFAULT_PROPS, ...props }));

  /**
   * @note This will a component as seen above, but I can't import things
   * from the admin package while it's not bundled.
   */
  const result = `<html lang="en">
  <head>
    <meta charSet="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <meta name="robots" content="noindex" />
    <meta name="referrer" content="same-origin" />

    <title>Strapi</title>
  </head>
  <body>
    <div id="app" />
    ${props.isVite ? `<script type="module" src="${props.entryPath}" />` : ''}
  </body>
</html>`;

  return `<!DOCTYPE html>${result}`;
};

const AUTO_GENERATED_WARNING = `
This file was automatically generated by Strapi.
Any modifications made will be discarded.
`.trim();

/**
 * Because we now auto-generate the index.html file,
 * we should be clear that people _should not_ modify it.
 *
 * @internal
 * @type {(htmlTemplate: string) => string)}
 */
const decorateHTMLWithAutoGeneratedWarning = (htmlTemplate) =>
  htmlTemplate.replace(/<head/, `\n<!--\n${AUTO_GENERATED_WARNING}\n-->\n<head`);

module.exports = {
  getDocumentHTML,
  decorateHTMLWithAutoGeneratedWarning,
};
